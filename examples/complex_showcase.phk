const banner = "Protohack Signal Recon";
println("==============================");
println(banner + " // complex demo");
println("==============================");

let sample_count = 12;
let noise_threshold = 30;
let seed = rand(100);

let traces = carve numeric(sample_count);
let anomaly_flags = carve flag(sample_count);

let frame = 0;
while (frame < sample_count) {
    let base = seed + (frame * 3.4);
    let jitter = rand(100) / 10;
    let reading = base + jitter - sqrt(frame + 1);
    let is_spike = reading > noise_threshold + frame;

    etch numeric(traces, frame, reading);
    etch flag(anomaly_flags, frame, is_spike);

    if (is_spike) {
        println("[" + to_string(frame) + "] spike -> " + to_string(reading));
    } else {
        println("[" + to_string(frame) + "] ok -> " + to_string(reading));
    }

    frame = frame + 1;
}

println("");

craft sum(readings, count as num) gives num {
    let i = 0;
    let total = 0;
    while (i < count) {
        let value = probe numeric(readings, i);
        total = total + value;
        i = i + 1;
    }
    yield total;
}

craft anomaly_count(flags, count as num) gives num {
    let i = 0;
    let total = 0;
    while (i < count) {
        if (probe flag(flags, i)) {
            total = total + 1;
        }
        i = i + 1;
    }
    yield total;
}

craft max_reading(readings, count as num) gives num {
    let i = 1;
    let highest = probe numeric(readings, 0);
    while (i < count) {
        let value = probe numeric(readings, i);
        if (value > highest) {
            highest = value;
        }
        i = i + 1;
    }
    yield highest;
}

craft format_report(avg as num, peak as num, flagged as num, total as num) gives text {
    let header = "summary:";
    let avg_part = " avg=" + to_string(avg);
    let peak_part = " peak=" + to_string(peak);
    let flag_part = " flagged=" + to_string(flagged) + "/" + to_string(total);
    yield header + avg_part + peak_part + flag_part;
}

let total_energy = sum(traces, sample_count);
let avg_energy = total_energy / sample_count;
let total_spikes = anomaly_count(anomaly_flags, sample_count);
let peak_energy = max_reading(traces, sample_count);
let report = format_report(avg_energy, peak_energy, total_spikes, sample_count);

println("");
println(report);

println("");
println("Anomaly timeline:");
for (let slot = 0; slot < sample_count; slot = slot + 1) {
    let status = probe flag(anomaly_flags, slot);
    let value = probe numeric(traces, slot);
    if (status) {
        println(" -> frame " + to_string(slot) + " flagged at " + to_string(value));
    } else {
        println(" -> frame " + to_string(slot) + " nominal (" + to_string(value) + ")");
    }
}
